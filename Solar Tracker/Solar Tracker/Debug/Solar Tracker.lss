
Solar Tracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000008e4  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800106  00800106  0000097e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b40  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078d  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045b  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f4  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fb  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000028eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  9e:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
// Waktu sebelumnya untuk menghitung delta waktu
volatile unsigned long prevTime1 = 0, prevTime2 = 0;

void adc_init() {
	// Inisialisasi ADC
	ADMUX = (1 << REFS0); // AVcc dengan eksternal kapasitor di AREF
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // Enable ADC, prescaler 64
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <adc_read>:
}

uint16_t adc_read(uint8_t ch) {
	// Pilih saluran ADC
	ADMUX &= 0xF0;
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	90 83       	st	Z, r25
	ADMUX |= ch;
  be:	90 81       	ld	r25, Z
  c0:	89 2b       	or	r24, r25
  c2:	80 83       	st	Z, r24

	// Memulai konversi
	ADCSRA |= (1 << ADSC);
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24

	// Tunggu konversi selesai
	while (ADCSRA & (1 << ADSC));
  ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d2:	86 fd       	sbrc	r24, 6
  d4:	fc cf       	rjmp	.-8      	; 0xce <adc_read+0x1a>

	return ADC;
  d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  de:	08 95       	ret

000000e0 <servo_init>:

void servo_init() {
	// Inisialisasi Timer1 untuk PWM
	TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
  e0:	82 ea       	ldi	r24, 0xA2	; 162
  e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Mode 14, prescaler 8
  e6:	8a e1       	ldi	r24, 0x1A	; 26
  e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 19999; // TOP value untuk 50Hz (20ms periode)
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	9e e4       	ldi	r25, 0x4E	; 78
  f0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  f4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << SERVO1_PIN) | (1 << SERVO2_PIN);
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	86 60       	ori	r24, 0x06	; 6
  fc:	84 b9       	out	0x04, r24	; 4
  fe:	08 95       	ret

00000100 <set_servo1_position>:
}

void set_servo1_position(int angle) {
	OCR1A = (angle * 11) + 1000; // Konversi derajat ke nilai OCR
 100:	2b e0       	ldi	r18, 0x0B	; 11
 102:	ac 01       	movw	r20, r24
 104:	24 9f       	mul	r18, r20
 106:	c0 01       	movw	r24, r0
 108:	25 9f       	mul	r18, r21
 10a:	90 0d       	add	r25, r0
 10c:	11 24       	eor	r1, r1
 10e:	88 51       	subi	r24, 0x18	; 24
 110:	9c 4f       	sbci	r25, 0xFC	; 252
 112:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 116:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 11a:	08 95       	ret

0000011c <set_servo2_position>:
}

void set_servo2_position(int angle) {
	OCR1B = (angle * 11) + 1000; // Konversi derajat ke nilai OCR
 11c:	2b e0       	ldi	r18, 0x0B	; 11
 11e:	ac 01       	movw	r20, r24
 120:	24 9f       	mul	r18, r20
 122:	c0 01       	movw	r24, r0
 124:	25 9f       	mul	r18, r21
 126:	90 0d       	add	r25, r0
 128:	11 24       	eor	r1, r1
 12a:	88 51       	subi	r24, 0x18	; 24
 12c:	9c 4f       	sbci	r25, 0xFC	; 252
 12e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 132:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 136:	08 95       	ret

00000138 <get_millis>:
}

unsigned long get_millis() {
	// Menggunakan Timer0 untuk melacak waktu
	return (unsigned long)(TCNT0 * 64.0 / (F_CPU / 1000.0));
 138:	66 b5       	in	r22, 0x26	; 38
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 77 03 	call	0x6ee	; 0x6ee <__floatsisf>
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e8       	ldi	r20, 0x80	; 128
 14a:	52 e4       	ldi	r21, 0x42	; 66
 14c:	0e 94 03 04 	call	0x806	; 0x806 <__mulsf3>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	4a e7       	ldi	r20, 0x7A	; 122
 156:	54 e4       	ldi	r21, 0x44	; 68
 158:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divsf3>
 15c:	0e 94 46 03 	call	0x68c	; 0x68c <__fixunssfsi>
}
 160:	08 95       	ret

00000162 <main>:

int main(void) {
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 d0       	rcall	.+0      	; 0x168 <main+0x6>
 168:	00 d0       	rcall	.+0      	; 0x16a <main+0x8>
 16a:	00 d0       	rcall	.+0      	; 0x16c <main+0xa>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	adc_init();
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	servo_init();
 174:	0e 94 70 00 	call	0xe0	; 0xe0 <servo_init>
	sei(); // Enable global interrupt
 178:	78 94       	sei

	set_servo1_position(pos1);
 17a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos1>
 17e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pos1+0x1>
 182:	0e 94 80 00 	call	0x100	; 0x100 <set_servo1_position>
	set_servo2_position(pos2);
 186:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pos2>
 18a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos2+0x1>
 18e:	0e 94 8e 00 	call	0x11c	; 0x11c <set_servo2_position>

	prevTime1 = get_millis();
 192:	0e 94 9c 00 	call	0x138	; 0x138 <get_millis>
 196:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <prevTime1>
 19a:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <prevTime1+0x1>
 19e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <prevTime1+0x2>
 1a2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <prevTime1+0x3>
	prevTime2 = get_millis();
 1a6:	0e 94 9c 00 	call	0x138	; 0x138 <get_millis>
 1aa:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 1ae:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 1b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
 1b6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>

	while (1) {
		// Membaca nilai dari setiap LDR
		int topLeft = adc_read(LDR_TL);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1c0:	7c 01       	movw	r14, r24
		int topRight = adc_read(LDR_TR);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1c8:	8c 01       	movw	r16, r24
		int bottomLeft = adc_read(LDR_BL);
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	89 83       	std	Y+1, r24	; 0x01
		int bottomRight = adc_read(LDR_BR);
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>

		// Menghitung rata-rata untuk bagian atas dan bawah
		int avgTop = (topLeft + topRight) / 2;
 1da:	17 01       	movw	r2, r14
 1dc:	20 0e       	add	r2, r16
 1de:	31 1e       	adc	r3, r17
 1e0:	33 20       	and	r3, r3
 1e2:	1c f4       	brge	.+6      	; 0x1ea <main+0x88>
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	22 1a       	sub	r2, r18
 1e8:	32 0a       	sbc	r3, r18
 1ea:	35 94       	asr	r3
 1ec:	27 94       	ror	r2
		int avgBottom = (bottomLeft + bottomRight) / 2;
 1ee:	29 81       	ldd	r18, Y+1	; 0x01
 1f0:	3a 81       	ldd	r19, Y+2	; 0x02
 1f2:	28 0f       	add	r18, r24
 1f4:	39 1f       	adc	r19, r25
 1f6:	33 23       	and	r19, r19
 1f8:	14 f4       	brge	.+4      	; 0x1fe <main+0x9c>
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	69 01       	movw	r12, r18
 200:	d5 94       	asr	r13
 202:	c7 94       	ror	r12
		
		// Menghitung rata-rata untuk bagian kiri dan kanan
		int avgLeft = (topLeft + bottomLeft) / 2;
 204:	49 81       	ldd	r20, Y+1	; 0x01
 206:	5a 81       	ldd	r21, Y+2	; 0x02
 208:	4e 0d       	add	r20, r14
 20a:	5f 1d       	adc	r21, r15
 20c:	5a 83       	std	Y+2, r21	; 0x02
 20e:	49 83       	std	Y+1, r20	; 0x01
 210:	55 23       	and	r21, r21
 212:	24 f4       	brge	.+8      	; 0x21c <main+0xba>
 214:	4f 5f       	subi	r20, 0xFF	; 255
 216:	5f 4f       	sbci	r21, 0xFF	; 255
 218:	5a 83       	std	Y+2, r21	; 0x02
 21a:	49 83       	std	Y+1, r20	; 0x01
 21c:	a9 81       	ldd	r26, Y+1	; 0x01
 21e:	ba 81       	ldd	r27, Y+2	; 0x02
 220:	b5 95       	asr	r27
 222:	a7 95       	ror	r26
 224:	be 83       	std	Y+6, r27	; 0x06
 226:	ad 83       	std	Y+5, r26	; 0x05
		int avgRight = (topRight + bottomRight) / 2;
 228:	08 0f       	add	r16, r24
 22a:	19 1f       	adc	r17, r25
 22c:	11 23       	and	r17, r17
 22e:	14 f4       	brge	.+4      	; 0x234 <main+0xd2>
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	15 95       	asr	r17
 236:	07 95       	ror	r16

		// Menghitung error untuk servo 1 dan 2
		float error1 = avgRight - avgLeft;
 238:	b8 01       	movw	r22, r16
 23a:	2d 81       	ldd	r18, Y+5	; 0x05
 23c:	3e 81       	ldd	r19, Y+6	; 0x06
 23e:	62 1b       	sub	r22, r18
 240:	73 0b       	sbc	r23, r19
 242:	07 2e       	mov	r0, r23
 244:	00 0c       	add	r0, r0
 246:	88 0b       	sbc	r24, r24
 248:	99 0b       	sbc	r25, r25
 24a:	0e 94 77 03 	call	0x6ee	; 0x6ee <__floatsisf>
 24e:	2b 01       	movw	r4, r22
 250:	3c 01       	movw	r6, r24
		float error2 = avgBottom - avgTop;
 252:	b6 01       	movw	r22, r12
 254:	62 19       	sub	r22, r2
 256:	73 09       	sbc	r23, r3
 258:	07 2e       	mov	r0, r23
 25a:	00 0c       	add	r0, r0
 25c:	88 0b       	sbc	r24, r24
 25e:	99 0b       	sbc	r25, r25
 260:	0e 94 77 03 	call	0x6ee	; 0x6ee <__floatsisf>
 264:	69 83       	std	Y+1, r22	; 0x01
 266:	7a 83       	std	Y+2, r23	; 0x02
 268:	8b 83       	std	Y+3, r24	; 0x03
 26a:	9c 83       	std	Y+4, r25	; 0x04

		// Menghitung delta waktu untuk servo 1
		unsigned long currentTime1 = get_millis();
 26c:	0e 94 9c 00 	call	0x138	; 0x138 <get_millis>
 270:	4b 01       	movw	r8, r22
 272:	5c 01       	movw	r10, r24
		float deltaTime1 = (currentTime1 - prevTime1) / 1000.0;
 274:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <prevTime1>
 278:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <prevTime1+0x1>
 27c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <prevTime1+0x2>
 280:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <prevTime1+0x3>
 284:	a5 01       	movw	r20, r10
 286:	94 01       	movw	r18, r8
 288:	28 1b       	sub	r18, r24
 28a:	39 0b       	sbc	r19, r25
 28c:	4a 0b       	sbc	r20, r26
 28e:	5b 0b       	sbc	r21, r27
 290:	ca 01       	movw	r24, r20
 292:	b9 01       	movw	r22, r18
 294:	0e 94 75 03 	call	0x6ea	; 0x6ea <__floatunsisf>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	4a e7       	ldi	r20, 0x7A	; 122
 29e:	54 e4       	ldi	r21, 0x44	; 68
 2a0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divsf3>
 2a4:	9b 01       	movw	r18, r22
 2a6:	ac 01       	movw	r20, r24

		// Menghitung integral dari error untuk servo 1
		integral1 += error1 * deltaTime1;
 2a8:	c3 01       	movw	r24, r6
 2aa:	b2 01       	movw	r22, r4
 2ac:	0e 94 03 04 	call	0x806	; 0x806 <__mulsf3>
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
 2b4:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <integral1>
 2b8:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <integral1+0x1>
 2bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <integral1+0x2>
 2c0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <integral1+0x3>
 2c4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__addsf3>
 2c8:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <integral1>
 2cc:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <integral1+0x1>
 2d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <integral1+0x2>
 2d4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <integral1+0x3>

		// Menghitung output PID untuk servo 1
		float output1 = Kp1 * error1 + Ki1 * integral1 + Kd1 * derivative1;

		// Menggerakkan servo 1
		if (abs(avgLeft - avgRight) > tol) {
 2d8:	8d 81       	ldd	r24, Y+5	; 0x05
 2da:	9e 81       	ldd	r25, Y+6	; 0x06
 2dc:	80 1b       	sub	r24, r16
 2de:	91 0b       	sbc	r25, r17
 2e0:	9c 01       	movw	r18, r24
 2e2:	22 f4       	brpl	.+8      	; 0x2ec <main+0x18a>
 2e4:	22 27       	eor	r18, r18
 2e6:	33 27       	eor	r19, r19
 2e8:	28 1b       	sub	r18, r24
 2ea:	39 0b       	sbc	r19, r25
 2ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f4:	82 17       	cp	r24, r18
 2f6:	93 07       	cpc	r25, r19
 2f8:	cc f5       	brge	.+114    	; 0x36c <main+0x20a>
			if (avgLeft > avgRight) {
 2fa:	4d 81       	ldd	r20, Y+5	; 0x05
 2fc:	5e 81       	ldd	r21, Y+6	; 0x06
 2fe:	04 17       	cp	r16, r20
 300:	15 07       	cpc	r17, r21
 302:	54 f4       	brge	.+20     	; 0x318 <main+0x1b6>
				pos1 = pos1 - 1;
 304:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos1>
 308:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pos1+0x1>
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pos1+0x1>
 312:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pos1>
 316:	09 c0       	rjmp	.+18     	; 0x32a <main+0x1c8>
				} else {
				pos1 = pos1 + 1;
 318:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos1>
 31c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pos1+0x1>
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pos1+0x1>
 326:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pos1>
			}
			pos1 = (pos1 < 0) ? 0 : (pos1 > 180) ? 180 : pos1;
 32a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos1>
 32e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pos1+0x1>
 332:	99 23       	and	r25, r25
 334:	64 f0       	brlt	.+24     	; 0x34e <main+0x1ec>
 336:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos1>
 33a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pos1+0x1>
 33e:	85 3b       	cpi	r24, 0xB5	; 181
 340:	91 05       	cpc	r25, r1
 342:	44 f4       	brge	.+16     	; 0x354 <main+0x1f2>
 344:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos1>
 348:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pos1+0x1>
 34c:	05 c0       	rjmp	.+10     	; 0x358 <main+0x1f6>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <main+0x1f6>
 354:	84 eb       	ldi	r24, 0xB4	; 180
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pos1+0x1>
 35c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pos1>
			set_servo1_position(pos1);
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos1>
 364:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pos1+0x1>
 368:	0e 94 80 00 	call	0x100	; 0x100 <set_servo1_position>
		}
		
		// Simpan error dan waktu sebelumnya untuk servo 1
		prevError1 = error1;
 36c:	40 92 1a 01 	sts	0x011A, r4	; 0x80011a <prevError1>
 370:	50 92 1b 01 	sts	0x011B, r5	; 0x80011b <prevError1+0x1>
 374:	60 92 1c 01 	sts	0x011C, r6	; 0x80011c <prevError1+0x2>
 378:	70 92 1d 01 	sts	0x011D, r7	; 0x80011d <prevError1+0x3>
		prevTime1 = currentTime1;
 37c:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <prevTime1>
 380:	90 92 0b 01 	sts	0x010B, r9	; 0x80010b <prevTime1+0x1>
 384:	a0 92 0c 01 	sts	0x010C, r10	; 0x80010c <prevTime1+0x2>
 388:	b0 92 0d 01 	sts	0x010D, r11	; 0x80010d <prevTime1+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	83 ed       	ldi	r24, 0xD3	; 211
 38e:	90 e3       	ldi	r25, 0x30	; 48
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x22e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x234>
 396:	00 00       	nop

		// Delay untuk menghindari perubahan posisi yang terlalu cepat
		_delay_ms(50);

		// Menghitung delta waktu untuk servo 2
		unsigned long currentTime2 = get_millis();
 398:	0e 94 9c 00 	call	0x138	; 0x138 <get_millis>
 39c:	4b 01       	movw	r8, r22
 39e:	5c 01       	movw	r10, r24
		float deltaTime2 = (currentTime2 - prevTime2) / 1000.0;
 3a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 3a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 3a8:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
 3ac:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
 3b0:	a5 01       	movw	r20, r10
 3b2:	94 01       	movw	r18, r8
 3b4:	28 1b       	sub	r18, r24
 3b6:	39 0b       	sbc	r19, r25
 3b8:	4a 0b       	sbc	r20, r26
 3ba:	5b 0b       	sbc	r21, r27
 3bc:	ca 01       	movw	r24, r20
 3be:	b9 01       	movw	r22, r18
 3c0:	0e 94 75 03 	call	0x6ea	; 0x6ea <__floatunsisf>
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	4a e7       	ldi	r20, 0x7A	; 122
 3ca:	54 e4       	ldi	r21, 0x44	; 68
 3cc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divsf3>
 3d0:	9b 01       	movw	r18, r22
 3d2:	ac 01       	movw	r20, r24

		// Menghitung integral dari error untuk servo 2
		integral2 += error2 * deltaTime2;
 3d4:	69 81       	ldd	r22, Y+1	; 0x01
 3d6:	7a 81       	ldd	r23, Y+2	; 0x02
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	9c 81       	ldd	r25, Y+4	; 0x04
 3dc:	0e 94 03 04 	call	0x806	; 0x806 <__mulsf3>
 3e0:	9b 01       	movw	r18, r22
 3e2:	ac 01       	movw	r20, r24
 3e4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <integral2>
 3e8:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <integral2+0x1>
 3ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <integral2+0x2>
 3f0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <integral2+0x3>
 3f4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__addsf3>
 3f8:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <integral2>
 3fc:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <integral2+0x1>
 400:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <integral2+0x2>
 404:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <integral2+0x3>

		// Menghitung output PID untuk servo 2
		float output2 = Kp2 * error2 + Ki2 * integral2 + Kd2 * derivative2;

		// Menggerakkan servo 2
		if (abs(avgTop - avgBottom) > tol) {
 408:	91 01       	movw	r18, r2
 40a:	2c 19       	sub	r18, r12
 40c:	3d 09       	sbc	r19, r13
 40e:	c9 01       	movw	r24, r18
 410:	99 23       	and	r25, r25
 412:	24 f4       	brge	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 414:	88 27       	eor	r24, r24
 416:	99 27       	eor	r25, r25
 418:	82 1b       	sub	r24, r18
 41a:	93 0b       	sbc	r25, r19
 41c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 420:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 424:	28 17       	cp	r18, r24
 426:	39 07       	cpc	r19, r25
 428:	bc f5       	brge	.+110    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			if (avgTop > avgBottom) {
 42a:	c2 14       	cp	r12, r2
 42c:	d3 04       	cpc	r13, r3
 42e:	54 f4       	brge	.+20     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				pos2 = pos2 - 1;
 430:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pos2>
 434:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos2+0x1>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pos2+0x1>
 43e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pos2>
 442:	09 c0       	rjmp	.+18     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				} else {
				pos2 = pos2 + 1;
 444:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pos2>
 448:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos2+0x1>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pos2+0x1>
 452:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pos2>
			}
			pos2 = (pos2 < 0) ? 0 : (pos2 > 180) ? 180 : pos2;
 456:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pos2>
 45a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos2+0x1>
 45e:	99 23       	and	r25, r25
 460:	64 f0       	brlt	.+24     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 462:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pos2>
 466:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos2+0x1>
 46a:	85 3b       	cpi	r24, 0xB5	; 181
 46c:	91 05       	cpc	r25, r1
 46e:	44 f4       	brge	.+16     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 470:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pos2>
 474:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos2+0x1>
 478:	05 c0       	rjmp	.+10     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	84 eb       	ldi	r24, 0xB4	; 180
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pos2+0x1>
 488:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pos2>
			set_servo2_position(pos2);
 48c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pos2>
 490:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos2+0x1>
 494:	0e 94 8e 00 	call	0x11c	; 0x11c <set_servo2_position>
		}

		// Simpan error dan waktu sebelumnya untuk servo 2
		prevError2 = error2;
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	9a 81       	ldd	r25, Y+2	; 0x02
 49c:	ab 81       	ldd	r26, Y+3	; 0x03
 49e:	bc 81       	ldd	r27, Y+4	; 0x04
 4a0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prevError2>
 4a4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <prevError2+0x1>
 4a8:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <prevError2+0x2>
 4ac:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <prevError2+0x3>
		prevTime2 = currentTime2;
 4b0:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <__data_end>
 4b4:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <__data_end+0x1>
 4b8:	a0 92 08 01 	sts	0x0108, r10	; 0x800108 <__data_end+0x2>
 4bc:	b0 92 09 01 	sts	0x0109, r11	; 0x800109 <__data_end+0x3>
 4c0:	a7 ea       	ldi	r26, 0xA7	; 167
 4c2:	b1 e6       	ldi	r27, 0x61	; 97
 4c4:	11 97       	sbiw	r26, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4ca:	00 00       	nop
 4cc:	76 ce       	rjmp	.-788    	; 0x1ba <main+0x58>

000004ce <__subsf3>:
 4ce:	50 58       	subi	r21, 0x80	; 128

000004d0 <__addsf3>:
 4d0:	bb 27       	eor	r27, r27
 4d2:	aa 27       	eor	r26, r26
 4d4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__addsf3x>
 4d8:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_round>
 4dc:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_pscA>
 4e0:	38 f0       	brcs	.+14     	; 0x4f0 <__addsf3+0x20>
 4e2:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_pscB>
 4e6:	20 f0       	brcs	.+8      	; 0x4f0 <__addsf3+0x20>
 4e8:	39 f4       	brne	.+14     	; 0x4f8 <__addsf3+0x28>
 4ea:	9f 3f       	cpi	r25, 0xFF	; 255
 4ec:	19 f4       	brne	.+6      	; 0x4f4 <__addsf3+0x24>
 4ee:	26 f4       	brtc	.+8      	; 0x4f8 <__addsf3+0x28>
 4f0:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>
 4f4:	0e f4       	brtc	.+2      	; 0x4f8 <__addsf3+0x28>
 4f6:	e0 95       	com	r30
 4f8:	e7 fb       	bst	r30, 7
 4fa:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>

000004fe <__addsf3x>:
 4fe:	e9 2f       	mov	r30, r25
 500:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_split3>
 504:	58 f3       	brcs	.-42     	; 0x4dc <__addsf3+0xc>
 506:	ba 17       	cp	r27, r26
 508:	62 07       	cpc	r22, r18
 50a:	73 07       	cpc	r23, r19
 50c:	84 07       	cpc	r24, r20
 50e:	95 07       	cpc	r25, r21
 510:	20 f0       	brcs	.+8      	; 0x51a <__addsf3x+0x1c>
 512:	79 f4       	brne	.+30     	; 0x532 <__addsf3x+0x34>
 514:	a6 f5       	brtc	.+104    	; 0x57e <__addsf3x+0x80>
 516:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_zero>
 51a:	0e f4       	brtc	.+2      	; 0x51e <__addsf3x+0x20>
 51c:	e0 95       	com	r30
 51e:	0b 2e       	mov	r0, r27
 520:	ba 2f       	mov	r27, r26
 522:	a0 2d       	mov	r26, r0
 524:	0b 01       	movw	r0, r22
 526:	b9 01       	movw	r22, r18
 528:	90 01       	movw	r18, r0
 52a:	0c 01       	movw	r0, r24
 52c:	ca 01       	movw	r24, r20
 52e:	a0 01       	movw	r20, r0
 530:	11 24       	eor	r1, r1
 532:	ff 27       	eor	r31, r31
 534:	59 1b       	sub	r21, r25
 536:	99 f0       	breq	.+38     	; 0x55e <__addsf3x+0x60>
 538:	59 3f       	cpi	r21, 0xF9	; 249
 53a:	50 f4       	brcc	.+20     	; 0x550 <__addsf3x+0x52>
 53c:	50 3e       	cpi	r21, 0xE0	; 224
 53e:	68 f1       	brcs	.+90     	; 0x59a <__addsf3x+0x9c>
 540:	1a 16       	cp	r1, r26
 542:	f0 40       	sbci	r31, 0x00	; 0
 544:	a2 2f       	mov	r26, r18
 546:	23 2f       	mov	r18, r19
 548:	34 2f       	mov	r19, r20
 54a:	44 27       	eor	r20, r20
 54c:	58 5f       	subi	r21, 0xF8	; 248
 54e:	f3 cf       	rjmp	.-26     	; 0x536 <__addsf3x+0x38>
 550:	46 95       	lsr	r20
 552:	37 95       	ror	r19
 554:	27 95       	ror	r18
 556:	a7 95       	ror	r26
 558:	f0 40       	sbci	r31, 0x00	; 0
 55a:	53 95       	inc	r21
 55c:	c9 f7       	brne	.-14     	; 0x550 <__addsf3x+0x52>
 55e:	7e f4       	brtc	.+30     	; 0x57e <__addsf3x+0x80>
 560:	1f 16       	cp	r1, r31
 562:	ba 0b       	sbc	r27, r26
 564:	62 0b       	sbc	r22, r18
 566:	73 0b       	sbc	r23, r19
 568:	84 0b       	sbc	r24, r20
 56a:	ba f0       	brmi	.+46     	; 0x59a <__addsf3x+0x9c>
 56c:	91 50       	subi	r25, 0x01	; 1
 56e:	a1 f0       	breq	.+40     	; 0x598 <__addsf3x+0x9a>
 570:	ff 0f       	add	r31, r31
 572:	bb 1f       	adc	r27, r27
 574:	66 1f       	adc	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	c2 f7       	brpl	.-16     	; 0x56c <__addsf3x+0x6e>
 57c:	0e c0       	rjmp	.+28     	; 0x59a <__addsf3x+0x9c>
 57e:	ba 0f       	add	r27, r26
 580:	62 1f       	adc	r22, r18
 582:	73 1f       	adc	r23, r19
 584:	84 1f       	adc	r24, r20
 586:	48 f4       	brcc	.+18     	; 0x59a <__addsf3x+0x9c>
 588:	87 95       	ror	r24
 58a:	77 95       	ror	r23
 58c:	67 95       	ror	r22
 58e:	b7 95       	ror	r27
 590:	f7 95       	ror	r31
 592:	9e 3f       	cpi	r25, 0xFE	; 254
 594:	08 f0       	brcs	.+2      	; 0x598 <__addsf3x+0x9a>
 596:	b0 cf       	rjmp	.-160    	; 0x4f8 <__addsf3+0x28>
 598:	93 95       	inc	r25
 59a:	88 0f       	add	r24, r24
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__addsf3x+0xa2>
 59e:	99 27       	eor	r25, r25
 5a0:	ee 0f       	add	r30, r30
 5a2:	97 95       	ror	r25
 5a4:	87 95       	ror	r24
 5a6:	08 95       	ret

000005a8 <__divsf3>:
 5a8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divsf3x>
 5ac:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_round>
 5b0:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_pscB>
 5b4:	58 f0       	brcs	.+22     	; 0x5cc <__divsf3+0x24>
 5b6:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_pscA>
 5ba:	40 f0       	brcs	.+16     	; 0x5cc <__divsf3+0x24>
 5bc:	29 f4       	brne	.+10     	; 0x5c8 <__divsf3+0x20>
 5be:	5f 3f       	cpi	r21, 0xFF	; 255
 5c0:	29 f0       	breq	.+10     	; 0x5cc <__divsf3+0x24>
 5c2:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 5c6:	51 11       	cpse	r21, r1
 5c8:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_szero>
 5cc:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>

000005d0 <__divsf3x>:
 5d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_split3>
 5d4:	68 f3       	brcs	.-38     	; 0x5b0 <__divsf3+0x8>

000005d6 <__divsf3_pse>:
 5d6:	99 23       	and	r25, r25
 5d8:	b1 f3       	breq	.-20     	; 0x5c6 <__divsf3+0x1e>
 5da:	55 23       	and	r21, r21
 5dc:	91 f3       	breq	.-28     	; 0x5c2 <__divsf3+0x1a>
 5de:	95 1b       	sub	r25, r21
 5e0:	55 0b       	sbc	r21, r21
 5e2:	bb 27       	eor	r27, r27
 5e4:	aa 27       	eor	r26, r26
 5e6:	62 17       	cp	r22, r18
 5e8:	73 07       	cpc	r23, r19
 5ea:	84 07       	cpc	r24, r20
 5ec:	38 f0       	brcs	.+14     	; 0x5fc <__divsf3_pse+0x26>
 5ee:	9f 5f       	subi	r25, 0xFF	; 255
 5f0:	5f 4f       	sbci	r21, 0xFF	; 255
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	44 1f       	adc	r20, r20
 5f8:	aa 1f       	adc	r26, r26
 5fa:	a9 f3       	breq	.-22     	; 0x5e6 <__divsf3_pse+0x10>
 5fc:	35 d0       	rcall	.+106    	; 0x668 <__divsf3_pse+0x92>
 5fe:	0e 2e       	mov	r0, r30
 600:	3a f0       	brmi	.+14     	; 0x610 <__divsf3_pse+0x3a>
 602:	e0 e8       	ldi	r30, 0x80	; 128
 604:	32 d0       	rcall	.+100    	; 0x66a <__divsf3_pse+0x94>
 606:	91 50       	subi	r25, 0x01	; 1
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	e6 95       	lsr	r30
 60c:	00 1c       	adc	r0, r0
 60e:	ca f7       	brpl	.-14     	; 0x602 <__divsf3_pse+0x2c>
 610:	2b d0       	rcall	.+86     	; 0x668 <__divsf3_pse+0x92>
 612:	fe 2f       	mov	r31, r30
 614:	29 d0       	rcall	.+82     	; 0x668 <__divsf3_pse+0x92>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	bb 1f       	adc	r27, r27
 61e:	26 17       	cp	r18, r22
 620:	37 07       	cpc	r19, r23
 622:	48 07       	cpc	r20, r24
 624:	ab 07       	cpc	r26, r27
 626:	b0 e8       	ldi	r27, 0x80	; 128
 628:	09 f0       	breq	.+2      	; 0x62c <__divsf3_pse+0x56>
 62a:	bb 0b       	sbc	r27, r27
 62c:	80 2d       	mov	r24, r0
 62e:	bf 01       	movw	r22, r30
 630:	ff 27       	eor	r31, r31
 632:	93 58       	subi	r25, 0x83	; 131
 634:	5f 4f       	sbci	r21, 0xFF	; 255
 636:	3a f0       	brmi	.+14     	; 0x646 <__divsf3_pse+0x70>
 638:	9e 3f       	cpi	r25, 0xFE	; 254
 63a:	51 05       	cpc	r21, r1
 63c:	78 f0       	brcs	.+30     	; 0x65c <__divsf3_pse+0x86>
 63e:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 642:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_szero>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	e4 f3       	brlt	.-8      	; 0x642 <__divsf3_pse+0x6c>
 64a:	98 3e       	cpi	r25, 0xE8	; 232
 64c:	d4 f3       	brlt	.-12     	; 0x642 <__divsf3_pse+0x6c>
 64e:	86 95       	lsr	r24
 650:	77 95       	ror	r23
 652:	67 95       	ror	r22
 654:	b7 95       	ror	r27
 656:	f7 95       	ror	r31
 658:	9f 5f       	subi	r25, 0xFF	; 255
 65a:	c9 f7       	brne	.-14     	; 0x64e <__divsf3_pse+0x78>
 65c:	88 0f       	add	r24, r24
 65e:	91 1d       	adc	r25, r1
 660:	96 95       	lsr	r25
 662:	87 95       	ror	r24
 664:	97 f9       	bld	r25, 7
 666:	08 95       	ret
 668:	e1 e0       	ldi	r30, 0x01	; 1
 66a:	66 0f       	add	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	bb 1f       	adc	r27, r27
 672:	62 17       	cp	r22, r18
 674:	73 07       	cpc	r23, r19
 676:	84 07       	cpc	r24, r20
 678:	ba 07       	cpc	r27, r26
 67a:	20 f0       	brcs	.+8      	; 0x684 <__divsf3_pse+0xae>
 67c:	62 1b       	sub	r22, r18
 67e:	73 0b       	sbc	r23, r19
 680:	84 0b       	sbc	r24, r20
 682:	ba 0b       	sbc	r27, r26
 684:	ee 1f       	adc	r30, r30
 686:	88 f7       	brcc	.-30     	; 0x66a <__divsf3_pse+0x94>
 688:	e0 95       	com	r30
 68a:	08 95       	ret

0000068c <__fixunssfsi>:
 68c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_splitA>
 690:	88 f0       	brcs	.+34     	; 0x6b4 <__fixunssfsi+0x28>
 692:	9f 57       	subi	r25, 0x7F	; 127
 694:	98 f0       	brcs	.+38     	; 0x6bc <__fixunssfsi+0x30>
 696:	b9 2f       	mov	r27, r25
 698:	99 27       	eor	r25, r25
 69a:	b7 51       	subi	r27, 0x17	; 23
 69c:	b0 f0       	brcs	.+44     	; 0x6ca <__fixunssfsi+0x3e>
 69e:	e1 f0       	breq	.+56     	; 0x6d8 <__fixunssfsi+0x4c>
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	88 1f       	adc	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	1a f0       	brmi	.+6      	; 0x6b0 <__fixunssfsi+0x24>
 6aa:	ba 95       	dec	r27
 6ac:	c9 f7       	brne	.-14     	; 0x6a0 <__fixunssfsi+0x14>
 6ae:	14 c0       	rjmp	.+40     	; 0x6d8 <__fixunssfsi+0x4c>
 6b0:	b1 30       	cpi	r27, 0x01	; 1
 6b2:	91 f0       	breq	.+36     	; 0x6d8 <__fixunssfsi+0x4c>
 6b4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_zero>
 6b8:	b1 e0       	ldi	r27, 0x01	; 1
 6ba:	08 95       	ret
 6bc:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_zero>
 6c0:	67 2f       	mov	r22, r23
 6c2:	78 2f       	mov	r23, r24
 6c4:	88 27       	eor	r24, r24
 6c6:	b8 5f       	subi	r27, 0xF8	; 248
 6c8:	39 f0       	breq	.+14     	; 0x6d8 <__fixunssfsi+0x4c>
 6ca:	b9 3f       	cpi	r27, 0xF9	; 249
 6cc:	cc f3       	brlt	.-14     	; 0x6c0 <__fixunssfsi+0x34>
 6ce:	86 95       	lsr	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	b3 95       	inc	r27
 6d6:	d9 f7       	brne	.-10     	; 0x6ce <__fixunssfsi+0x42>
 6d8:	3e f4       	brtc	.+14     	; 0x6e8 <__fixunssfsi+0x5c>
 6da:	90 95       	com	r25
 6dc:	80 95       	com	r24
 6de:	70 95       	com	r23
 6e0:	61 95       	neg	r22
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	08 95       	ret

000006ea <__floatunsisf>:
 6ea:	e8 94       	clt
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <__floatsisf+0x12>

000006ee <__floatsisf>:
 6ee:	97 fb       	bst	r25, 7
 6f0:	3e f4       	brtc	.+14     	; 0x700 <__floatsisf+0x12>
 6f2:	90 95       	com	r25
 6f4:	80 95       	com	r24
 6f6:	70 95       	com	r23
 6f8:	61 95       	neg	r22
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	99 23       	and	r25, r25
 702:	a9 f0       	breq	.+42     	; 0x72e <__floatsisf+0x40>
 704:	f9 2f       	mov	r31, r25
 706:	96 e9       	ldi	r25, 0x96	; 150
 708:	bb 27       	eor	r27, r27
 70a:	93 95       	inc	r25
 70c:	f6 95       	lsr	r31
 70e:	87 95       	ror	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	b7 95       	ror	r27
 716:	f1 11       	cpse	r31, r1
 718:	f8 cf       	rjmp	.-16     	; 0x70a <__floatsisf+0x1c>
 71a:	fa f4       	brpl	.+62     	; 0x75a <__floatsisf+0x6c>
 71c:	bb 0f       	add	r27, r27
 71e:	11 f4       	brne	.+4      	; 0x724 <__floatsisf+0x36>
 720:	60 ff       	sbrs	r22, 0
 722:	1b c0       	rjmp	.+54     	; 0x75a <__floatsisf+0x6c>
 724:	6f 5f       	subi	r22, 0xFF	; 255
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	8f 4f       	sbci	r24, 0xFF	; 255
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	16 c0       	rjmp	.+44     	; 0x75a <__floatsisf+0x6c>
 72e:	88 23       	and	r24, r24
 730:	11 f0       	breq	.+4      	; 0x736 <__floatsisf+0x48>
 732:	96 e9       	ldi	r25, 0x96	; 150
 734:	11 c0       	rjmp	.+34     	; 0x758 <__floatsisf+0x6a>
 736:	77 23       	and	r23, r23
 738:	21 f0       	breq	.+8      	; 0x742 <__floatsisf+0x54>
 73a:	9e e8       	ldi	r25, 0x8E	; 142
 73c:	87 2f       	mov	r24, r23
 73e:	76 2f       	mov	r23, r22
 740:	05 c0       	rjmp	.+10     	; 0x74c <__floatsisf+0x5e>
 742:	66 23       	and	r22, r22
 744:	71 f0       	breq	.+28     	; 0x762 <__floatsisf+0x74>
 746:	96 e8       	ldi	r25, 0x86	; 134
 748:	86 2f       	mov	r24, r22
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	2a f0       	brmi	.+10     	; 0x75a <__floatsisf+0x6c>
 750:	9a 95       	dec	r25
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	da f7       	brpl	.-10     	; 0x750 <__floatsisf+0x62>
 75a:	88 0f       	add	r24, r24
 75c:	96 95       	lsr	r25
 75e:	87 95       	ror	r24
 760:	97 f9       	bld	r25, 7
 762:	08 95       	ret

00000764 <__fp_inf>:
 764:	97 f9       	bld	r25, 7
 766:	9f 67       	ori	r25, 0x7F	; 127
 768:	80 e8       	ldi	r24, 0x80	; 128
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	08 95       	ret

00000770 <__fp_nan>:
 770:	9f ef       	ldi	r25, 0xFF	; 255
 772:	80 ec       	ldi	r24, 0xC0	; 192
 774:	08 95       	ret

00000776 <__fp_pscA>:
 776:	00 24       	eor	r0, r0
 778:	0a 94       	dec	r0
 77a:	16 16       	cp	r1, r22
 77c:	17 06       	cpc	r1, r23
 77e:	18 06       	cpc	r1, r24
 780:	09 06       	cpc	r0, r25
 782:	08 95       	ret

00000784 <__fp_pscB>:
 784:	00 24       	eor	r0, r0
 786:	0a 94       	dec	r0
 788:	12 16       	cp	r1, r18
 78a:	13 06       	cpc	r1, r19
 78c:	14 06       	cpc	r1, r20
 78e:	05 06       	cpc	r0, r21
 790:	08 95       	ret

00000792 <__fp_round>:
 792:	09 2e       	mov	r0, r25
 794:	03 94       	inc	r0
 796:	00 0c       	add	r0, r0
 798:	11 f4       	brne	.+4      	; 0x79e <__fp_round+0xc>
 79a:	88 23       	and	r24, r24
 79c:	52 f0       	brmi	.+20     	; 0x7b2 <__fp_round+0x20>
 79e:	bb 0f       	add	r27, r27
 7a0:	40 f4       	brcc	.+16     	; 0x7b2 <__fp_round+0x20>
 7a2:	bf 2b       	or	r27, r31
 7a4:	11 f4       	brne	.+4      	; 0x7aa <__fp_round+0x18>
 7a6:	60 ff       	sbrs	r22, 0
 7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <__fp_round+0x20>
 7aa:	6f 5f       	subi	r22, 0xFF	; 255
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__fp_split3>:
 7b4:	57 fd       	sbrc	r21, 7
 7b6:	90 58       	subi	r25, 0x80	; 128
 7b8:	44 0f       	add	r20, r20
 7ba:	55 1f       	adc	r21, r21
 7bc:	59 f0       	breq	.+22     	; 0x7d4 <__fp_splitA+0x10>
 7be:	5f 3f       	cpi	r21, 0xFF	; 255
 7c0:	71 f0       	breq	.+28     	; 0x7de <__fp_splitA+0x1a>
 7c2:	47 95       	ror	r20

000007c4 <__fp_splitA>:
 7c4:	88 0f       	add	r24, r24
 7c6:	97 fb       	bst	r25, 7
 7c8:	99 1f       	adc	r25, r25
 7ca:	61 f0       	breq	.+24     	; 0x7e4 <__fp_splitA+0x20>
 7cc:	9f 3f       	cpi	r25, 0xFF	; 255
 7ce:	79 f0       	breq	.+30     	; 0x7ee <__fp_splitA+0x2a>
 7d0:	87 95       	ror	r24
 7d2:	08 95       	ret
 7d4:	12 16       	cp	r1, r18
 7d6:	13 06       	cpc	r1, r19
 7d8:	14 06       	cpc	r1, r20
 7da:	55 1f       	adc	r21, r21
 7dc:	f2 cf       	rjmp	.-28     	; 0x7c2 <__fp_split3+0xe>
 7de:	46 95       	lsr	r20
 7e0:	f1 df       	rcall	.-30     	; 0x7c4 <__fp_splitA>
 7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <__fp_splitA+0x30>
 7e4:	16 16       	cp	r1, r22
 7e6:	17 06       	cpc	r1, r23
 7e8:	18 06       	cpc	r1, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	f1 cf       	rjmp	.-30     	; 0x7d0 <__fp_splitA+0xc>
 7ee:	86 95       	lsr	r24
 7f0:	71 05       	cpc	r23, r1
 7f2:	61 05       	cpc	r22, r1
 7f4:	08 94       	sec
 7f6:	08 95       	ret

000007f8 <__fp_zero>:
 7f8:	e8 94       	clt

000007fa <__fp_szero>:
 7fa:	bb 27       	eor	r27, r27
 7fc:	66 27       	eor	r22, r22
 7fe:	77 27       	eor	r23, r23
 800:	cb 01       	movw	r24, r22
 802:	97 f9       	bld	r25, 7
 804:	08 95       	ret

00000806 <__mulsf3>:
 806:	0e 94 16 04 	call	0x82c	; 0x82c <__mulsf3x>
 80a:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_round>
 80e:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_pscA>
 812:	38 f0       	brcs	.+14     	; 0x822 <__mulsf3+0x1c>
 814:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_pscB>
 818:	20 f0       	brcs	.+8      	; 0x822 <__mulsf3+0x1c>
 81a:	95 23       	and	r25, r21
 81c:	11 f0       	breq	.+4      	; 0x822 <__mulsf3+0x1c>
 81e:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 822:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_nan>
 826:	11 24       	eor	r1, r1
 828:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_szero>

0000082c <__mulsf3x>:
 82c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_split3>
 830:	70 f3       	brcs	.-36     	; 0x80e <__mulsf3+0x8>

00000832 <__mulsf3_pse>:
 832:	95 9f       	mul	r25, r21
 834:	c1 f3       	breq	.-16     	; 0x826 <__mulsf3+0x20>
 836:	95 0f       	add	r25, r21
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	55 1f       	adc	r21, r21
 83c:	62 9f       	mul	r22, r18
 83e:	f0 01       	movw	r30, r0
 840:	72 9f       	mul	r23, r18
 842:	bb 27       	eor	r27, r27
 844:	f0 0d       	add	r31, r0
 846:	b1 1d       	adc	r27, r1
 848:	63 9f       	mul	r22, r19
 84a:	aa 27       	eor	r26, r26
 84c:	f0 0d       	add	r31, r0
 84e:	b1 1d       	adc	r27, r1
 850:	aa 1f       	adc	r26, r26
 852:	64 9f       	mul	r22, r20
 854:	66 27       	eor	r22, r22
 856:	b0 0d       	add	r27, r0
 858:	a1 1d       	adc	r26, r1
 85a:	66 1f       	adc	r22, r22
 85c:	82 9f       	mul	r24, r18
 85e:	22 27       	eor	r18, r18
 860:	b0 0d       	add	r27, r0
 862:	a1 1d       	adc	r26, r1
 864:	62 1f       	adc	r22, r18
 866:	73 9f       	mul	r23, r19
 868:	b0 0d       	add	r27, r0
 86a:	a1 1d       	adc	r26, r1
 86c:	62 1f       	adc	r22, r18
 86e:	83 9f       	mul	r24, r19
 870:	a0 0d       	add	r26, r0
 872:	61 1d       	adc	r22, r1
 874:	22 1f       	adc	r18, r18
 876:	74 9f       	mul	r23, r20
 878:	33 27       	eor	r19, r19
 87a:	a0 0d       	add	r26, r0
 87c:	61 1d       	adc	r22, r1
 87e:	23 1f       	adc	r18, r19
 880:	84 9f       	mul	r24, r20
 882:	60 0d       	add	r22, r0
 884:	21 1d       	adc	r18, r1
 886:	82 2f       	mov	r24, r18
 888:	76 2f       	mov	r23, r22
 88a:	6a 2f       	mov	r22, r26
 88c:	11 24       	eor	r1, r1
 88e:	9f 57       	subi	r25, 0x7F	; 127
 890:	50 40       	sbci	r21, 0x00	; 0
 892:	9a f0       	brmi	.+38     	; 0x8ba <__mulsf3_pse+0x88>
 894:	f1 f0       	breq	.+60     	; 0x8d2 <__mulsf3_pse+0xa0>
 896:	88 23       	and	r24, r24
 898:	4a f0       	brmi	.+18     	; 0x8ac <__mulsf3_pse+0x7a>
 89a:	ee 0f       	add	r30, r30
 89c:	ff 1f       	adc	r31, r31
 89e:	bb 1f       	adc	r27, r27
 8a0:	66 1f       	adc	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	91 50       	subi	r25, 0x01	; 1
 8a8:	50 40       	sbci	r21, 0x00	; 0
 8aa:	a9 f7       	brne	.-22     	; 0x896 <__mulsf3_pse+0x64>
 8ac:	9e 3f       	cpi	r25, 0xFE	; 254
 8ae:	51 05       	cpc	r21, r1
 8b0:	80 f0       	brcs	.+32     	; 0x8d2 <__mulsf3_pse+0xa0>
 8b2:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_inf>
 8b6:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_szero>
 8ba:	5f 3f       	cpi	r21, 0xFF	; 255
 8bc:	e4 f3       	brlt	.-8      	; 0x8b6 <__mulsf3_pse+0x84>
 8be:	98 3e       	cpi	r25, 0xE8	; 232
 8c0:	d4 f3       	brlt	.-12     	; 0x8b6 <__mulsf3_pse+0x84>
 8c2:	86 95       	lsr	r24
 8c4:	77 95       	ror	r23
 8c6:	67 95       	ror	r22
 8c8:	b7 95       	ror	r27
 8ca:	f7 95       	ror	r31
 8cc:	e7 95       	ror	r30
 8ce:	9f 5f       	subi	r25, 0xFF	; 255
 8d0:	c1 f7       	brne	.-16     	; 0x8c2 <__mulsf3_pse+0x90>
 8d2:	fe 2b       	or	r31, r30
 8d4:	88 0f       	add	r24, r24
 8d6:	91 1d       	adc	r25, r1
 8d8:	96 95       	lsr	r25
 8da:	87 95       	ror	r24
 8dc:	97 f9       	bld	r25, 7
 8de:	08 95       	ret

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>
